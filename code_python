import pandas as pd
import ijson
import matplotlib.pyplot as plt
import seaborn as sns
import requests
import io

# URL con los datos
url = 'https://data.cityofnewyork.us/api/views/c3uy-2p5r/rows.json?accessType=DOWNLOAD'

# Descargar los datos a través de una solicitud HTTP
try:
    respuesta = requests.get(url)
    respuesta.raise_for_status()  # Verificar si la descarga fue exitosa
    print("Archivo leído correctamente desde la URL.")
except requests.exceptions.RequestException as e:
    print("Ocurrió un error al descargar el archivo:", e)
    exit()

# Convertir el texto de la respuesta en un flujo de datos compatible con ijson
flujo_datos = io.StringIO(respuesta.text)

# Extraer los nombres de las columnas
objetos = ijson.items(flujo_datos, 'meta.view.columns.item')
columnas = list(objetos)
nombres_columnas = [col['fieldName'] for col in columnas]  # Obtener los nombres de las columnas
print("Nombres de columnas extraídos correctamente.")

# Seleccionar las columnas de interés
columnas_interes = ['unique_id', 'name', 'measure', 'measure_info', 'geo_type_name',
                    'geo_place_name', 'time_period', 'start_date', 'data_value']

# Reiniciar el flujo para leer los datos
flujo_datos.seek(0)

# Extraer los datos
datos = []
objetos = ijson.items(flujo_datos, 'data.item')  # Leer los datos línea por línea
for fila in objetos:  # Iterar sobre cada fila de datos
    fila_seleccionada = []
    for columna in columnas_interes:  # Seleccionar las columnas de interés
        fila_seleccionada.append(fila[nombres_columnas.index(columna)])  # Añadir datos basados en el índice de la columna
    datos.append(fila_seleccionada)

print("Datos extraídos correctamente.")

# Crear DataFrame
df = pd.DataFrame(datos, columns=columnas_interes)
df = df.drop_duplicates()
print("DataFrame creado correctamente.")

# Procesar y filtrar los datos
df['data_value'] = pd.to_numeric(df['data_value'], errors='coerce')
datos_pm25 = df[(df['name'] == 'Fine particles (PM 2.5)') & (df['measure_info'].isin(['mcg/m3', 'µg/m3']))]

# Encontrar el área más contaminada
area_mas_contaminada = datos_pm25.loc[datos_pm25['data_value'].idxmax()]
print("El área más contaminada (PM 2.5):", area_mas_contaminada['geo_place_name'])
print("Concentración de PM 2.5:", area_mas_contaminada['data_value'], "mcg/m3")
print("Período:", area_mas_contaminada['time_period'])

# Agrupar y ordenar los datos
pm25_agrupados = datos_pm25.groupby('geo_place_name').agg({'data_value': 'mean'}).reset_index()
pm25_ordenados = pm25_agrupados.sort_values(by='data_value', ascending=False).reset_index(drop=True)

# Visualización
top_10_pm25 = pm25_ordenados.head(10)
plt.figure(figsize=(10, 6))
sns.barplot(data=top_10_pm25, x='geo_place_name', y='data_value', palette='viridis')
plt.title('Las 10 áreas más contaminadas por concentración promedio de PM 2.5')
plt.xlabel('Área')
plt.ylabel('Concentración promedio de PM 2.5 (mcg/m³)')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()
